# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal
# numbers are all figurate (polygonal) numbers and are generated by
# the following formulae:

# Triangle        P_{3,n} = n(n + 1) / 2       1, 3, 6, 10, 15, ...
# Square          P_{4,n} = n^2                1, 4, 9, 16, 25, ...
# Pentagonal      P_{5,n} = n(3n - 1) / 2      1, 5, 12, 22, 35, ...
# Hexagonal       P_{6,n} = n(2n - 1)          1, 6, 15, 28, 45, ...
# Heptagonal      P_{7,n} = n(5n - 3) /2       1, 7, 18, 34, 55, ...
# Octagonal       P_{8,n} = n(3n - 2)          1, 8, 21, 40, 65, ...

# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has
# three interesting properties.

# 1. The set is cyclic, in that the last two digits of each number is
#   the first two digits of the next number (including the last number
#   with the first).
# 2. Each polygonal type: triangle (P_{3,127} = 8128), square
#   (P_{4,91} = 8281), and pentagonal (P_{5,44} = 2882), is represented
#   by a different number in the set.
# 3. This is the only set of 4-digit numbers with this property.

# Find the sum of the only ordered set of six cyclic 4-digit numbers
# for which each polygonal type: triangle, square, pentagonal, hexagonal,
# heptagonal, and octagonal, is represented by a different number in
# the set.

triangle = [n * (n + 1) / 2 for n in range(45, 141)]
square = [n * n for n in range(32, 100)]
pentagonal = [n * (3 * n - 1) / 2 for n in range(26, 82)]
hexagonal = [n * (2 * n - 1) for n in range(23, 71)]
heptagonal = [n * (5 * n - 3) / 2 for n in range(21, 64)]
octagonal = [n * (3 * n - 2) for n in range(19, 59)]

nums = [triangle, square, pentagonal, hexagonal, heptagonal, octagonal]
visited = [False for x in range(6)]
ans = [0 for x in range(6)]

def is_cyclic(head, num):
	if all(visited) and str(head)[:2] == str(num)[2:]:
		return True
	digits = str(num)[2:]
	for i in range(1, 6):
		if not visited[i]:
			visited[i] = True
			for n in nums[i]:
				if str(n)[:2] == digits and is_cyclic(head, n):
					ans[i] = n
					return True
			visited[i] = False
	return False

visited[0] = True
for n in triangle:
	if is_cyclic(n, n):
		ans[0] = n
		break

print sum(ans)
